# Generated from Python3Simplified.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,239,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,31,1,31,5,31,180,8,31,10,31,12,31,183,9,31,1,32,4,32,
        186,8,32,11,32,12,32,187,1,33,1,33,5,33,192,8,33,10,33,12,33,195,
        9,33,1,33,1,33,1,33,5,33,200,8,33,10,33,12,33,203,9,33,1,33,3,33,
        206,8,33,1,34,3,34,209,8,34,1,34,1,34,3,34,213,8,34,1,35,1,35,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,5,37,226,8,37,10,37,12,
        37,229,9,37,1,37,1,37,1,38,4,38,234,8,38,11,38,12,38,235,1,38,1,
        38,2,193,201,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,1,0,5,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,10,10,12,13,1,
        0,32,32,247,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,
        1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,89,
        1,0,0,0,13,91,1,0,0,0,15,93,1,0,0,0,17,96,1,0,0,0,19,99,1,0,0,0,
        21,102,1,0,0,0,23,105,1,0,0,0,25,107,1,0,0,0,27,110,1,0,0,0,29,112,
        1,0,0,0,31,114,1,0,0,0,33,116,1,0,0,0,35,118,1,0,0,0,37,123,1,0,
        0,0,39,129,1,0,0,0,41,131,1,0,0,0,43,133,1,0,0,0,45,136,1,0,0,0,
        47,141,1,0,0,0,49,146,1,0,0,0,51,152,1,0,0,0,53,156,1,0,0,0,55,159,
        1,0,0,0,57,163,1,0,0,0,59,170,1,0,0,0,61,174,1,0,0,0,63,177,1,0,
        0,0,65,185,1,0,0,0,67,205,1,0,0,0,69,212,1,0,0,0,71,214,1,0,0,0,
        73,216,1,0,0,0,75,223,1,0,0,0,77,233,1,0,0,0,79,80,5,61,0,0,80,2,
        1,0,0,0,81,82,5,58,0,0,82,4,1,0,0,0,83,84,5,40,0,0,84,6,1,0,0,0,
        85,86,5,41,0,0,86,8,1,0,0,0,87,88,5,44,0,0,88,10,1,0,0,0,89,90,5,
        60,0,0,90,12,1,0,0,0,91,92,5,62,0,0,92,14,1,0,0,0,93,94,5,61,0,0,
        94,95,5,61,0,0,95,16,1,0,0,0,96,97,5,62,0,0,97,98,5,61,0,0,98,18,
        1,0,0,0,99,100,5,60,0,0,100,101,5,61,0,0,101,20,1,0,0,0,102,103,
        5,33,0,0,103,104,5,61,0,0,104,22,1,0,0,0,105,106,5,42,0,0,106,24,
        1,0,0,0,107,108,5,47,0,0,108,109,5,47,0,0,109,26,1,0,0,0,110,111,
        5,47,0,0,111,28,1,0,0,0,112,113,5,37,0,0,113,30,1,0,0,0,114,115,
        5,43,0,0,115,32,1,0,0,0,116,117,5,45,0,0,117,34,1,0,0,0,118,119,
        5,84,0,0,119,120,5,114,0,0,120,121,5,117,0,0,121,122,5,101,0,0,122,
        36,1,0,0,0,123,124,5,70,0,0,124,125,5,97,0,0,125,126,5,108,0,0,126,
        127,5,115,0,0,127,128,5,101,0,0,128,38,1,0,0,0,129,130,5,91,0,0,
        130,40,1,0,0,0,131,132,5,93,0,0,132,42,1,0,0,0,133,134,5,105,0,0,
        134,135,5,102,0,0,135,44,1,0,0,0,136,137,5,101,0,0,137,138,5,108,
        0,0,138,139,5,105,0,0,139,140,5,102,0,0,140,46,1,0,0,0,141,142,5,
        101,0,0,142,143,5,108,0,0,143,144,5,115,0,0,144,145,5,101,0,0,145,
        48,1,0,0,0,146,147,5,119,0,0,147,148,5,104,0,0,148,149,5,105,0,0,
        149,150,5,108,0,0,150,151,5,101,0,0,151,50,1,0,0,0,152,153,5,102,
        0,0,153,154,5,111,0,0,154,155,5,114,0,0,155,52,1,0,0,0,156,157,5,
        105,0,0,157,158,5,110,0,0,158,54,1,0,0,0,159,160,5,100,0,0,160,161,
        5,101,0,0,161,162,5,102,0,0,162,56,1,0,0,0,163,164,5,114,0,0,164,
        165,5,101,0,0,165,166,5,116,0,0,166,167,5,117,0,0,167,168,5,114,
        0,0,168,169,5,110,0,0,169,58,1,0,0,0,170,171,5,97,0,0,171,172,5,
        110,0,0,172,173,5,100,0,0,173,60,1,0,0,0,174,175,5,111,0,0,175,176,
        5,114,0,0,176,62,1,0,0,0,177,181,7,0,0,0,178,180,7,1,0,0,179,178,
        1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,64,1,
        0,0,0,183,181,1,0,0,0,184,186,7,2,0,0,185,184,1,0,0,0,186,187,1,
        0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,66,1,0,0,0,189,193,5,34,
        0,0,190,192,9,0,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,194,1,0,
        0,0,193,191,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,206,5,34,
        0,0,197,201,5,39,0,0,198,200,9,0,0,0,199,198,1,0,0,0,200,203,1,0,
        0,0,201,202,1,0,0,0,201,199,1,0,0,0,202,204,1,0,0,0,203,201,1,0,
        0,0,204,206,5,39,0,0,205,189,1,0,0,0,205,197,1,0,0,0,206,68,1,0,
        0,0,207,209,5,13,0,0,208,207,1,0,0,0,208,209,1,0,0,0,209,210,1,0,
        0,0,210,213,5,10,0,0,211,213,5,13,0,0,212,208,1,0,0,0,212,211,1,
        0,0,0,213,70,1,0,0,0,214,215,5,9,0,0,215,72,1,0,0,0,216,217,5,68,
        0,0,217,218,5,69,0,0,218,219,5,68,0,0,219,220,5,69,0,0,220,221,5,
        78,0,0,221,222,5,84,0,0,222,74,1,0,0,0,223,227,5,35,0,0,224,226,
        8,3,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,
        1,0,0,0,228,230,1,0,0,0,229,227,1,0,0,0,230,231,6,37,0,0,231,76,
        1,0,0,0,232,234,7,4,0,0,233,232,1,0,0,0,234,235,1,0,0,0,235,233,
        1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,6,38,0,0,238,78,
        1,0,0,0,10,0,181,187,193,201,205,208,212,227,235,1,6,0,0
    ]

class Python3SimplifiedLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    IF = 22
    ELIF = 23
    ELSE = 24
    WHILE = 25
    FOR = 26
    IN = 27
    DEF = 28
    RETURN = 29
    AND = 30
    OR = 31
    NAME = 32
    NUMBER = 33
    STRING = 34
    NEWLINE = 35
    INDENT = 36
    DEDENT = 37
    COMMENT = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "':'", "'('", "')'", "','", "'<'", "'>'", "'=='", "'>='", 
            "'<='", "'!='", "'*'", "'//'", "'/'", "'%'", "'+'", "'-'", "'True'", 
            "'False'", "'['", "']'", "'if'", "'elif'", "'else'", "'while'", 
            "'for'", "'in'", "'def'", "'return'", "'and'", "'or'", "'\\t'", 
            "'DEDENT'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", "DEF", "RETURN", 
            "AND", "OR", "NAME", "NUMBER", "STRING", "NEWLINE", "INDENT", 
            "DEDENT", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", "DEF", 
                  "RETURN", "AND", "OR", "NAME", "NUMBER", "STRING", "NEWLINE", 
                  "INDENT", "DEDENT", "COMMENT", "WS" ]

    grammarFileName = "Python3Simplified.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


